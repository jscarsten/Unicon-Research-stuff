JVM switch implementation
	- 2 different switch implementations
	- lookupswitch instruction
		- uses a table of case values and their corresponding labels 
		- compares the integer on the top of the stack (case expression value) to the keys 
		  in the table until a match is found
		- then jump to the label
		- keys in table are sorted and the key is searched using binary search
		- overall O(logn) time complexity
	- tableswitch
		- uses a table with only labels (essentially an array)
		- uses case expression integer value as an index into the "table" to grab the
		  label immediately
		- overall O(1) time complexity
	- how does the compiler decide which instruction to use?
		- how "compact" is the switch statement?
		- ex1. perfectly compact

			switch(input){
				case 1:
				case 2:
				case 3:
				default:
			}

			// this switch is perfectly compact, no "holes"
			// in this case the compiler will generate a tableswitch:


			tableswitch 1 3
				Label1
				Label2
				Label3
			default: DefaultLabel

			// psuedocode for this code block

			int val = pop()                  // get case expression value
			if (val < low || val > high){	 // low = 1, high = 3
				pc += default
			} else {
				pc += table[val - low]
			}

		- ex2. mostly compact

			switch(input) {
				case 1: ...
				case 3: ...
				case 4: ...
				case 5: ...
				default: ...
			}

			// bytecode

			tableswitch 1 6 
				Label1
				FakeLabel2
				Label3
				Label4
				Label5
			default DefaultLabel


			FakeLabel2:
			DefaultLabel:
				; /* default code */


			// Essentially holes are filled with fake labels in the table
			// The fake labels are essentially the same as a default label

		- ex3. sparse

			switch (input){
				case 1: ...
				case 10: ...
				case 100: ...
				case 1000: ...
				default:
			}

			// in this case java uses lookupswitch since the table will only have 5 
			// entries instead of 1000

			lookupswitch
			    1       : Label1
			    10      : Label10
			    100     : Label100
			    1000    : Label1000
	    		default : DefaultLabel
	   	- Java uses a choice algorithm to decide which intruction to use
	   		- link to code 
	   			http://hg.openjdk.java.net/jdk8/jdk8/langtools/file/30db5e0aaf83/src/share/classes/com/sun/tools/javac/jvm/Gen.java#l1153
	   		- find out the space cost of the table in words for table/lookupswitch
	   		- find out the time cost in number of comparisons for table/lookupswitch
	   		- psuedocode :

	   			if (nlabels > 0) AND 
	   			   (table_space_cost + 3 * table_time_cost <=
	   			   lookup_space_cost + 3 * lookup_time_cost) {
	   			   	
	   				opcode = tableswitch
	   			} else {
	   				opcode = lookupswitch
	   			}


Takeaways for Unicon from Java:
	- tablelookup is a simple, fast optimization for dense tables
	- lookupswitch is a more complex, but still efficient method for sparse tables
	- Questions...
		- what is the density threshold?
		- would it be valueable to implement both methods?
		- Should our method be implemented in the unicon VM like Java?
		- Lets say we implement both of these methods, then would there be any need for
		  the current implementation?


C++ switch implementation
	- switch condition values must be integers, enumerations, or classes
		- if class, then the class is contextually, implicitly converted to an integer
	- basically uses the same methods as java, jump table and binary search


Ideas:
	- We know that a tableswitch is faster than lookupswitch.
	- We also know that tableswitch for sparse case tables creates a lot of storage overhead.
	- What if we look at a given case table as a distribution of integers within a certain range. 
	- for example lets say that we have cases 1,2,3,4,5, ... 100, 1000
	- this would probably be classified as sparse by the compiler
	- what if we evaluate the outlier integer value 1000 seperately, before the other integers, then use tableswitch on the remaining, compact table?
	- This would essentially turn a O(log(1000)) operation into a O(1 + 1) operation
	- O(logn) is still pretty fast and im not sure any outlier detection algorithm could beat it

	Trying Outlier Detection 
		- Using the inter quartile range (IQR) and Tukey's method

			Q1 = (n + 1)/4
			Q3 =  3[(n + 1)/4]
			IQR - Q3 - Q1

			upper = Q3 + (1.5 * IQR)
			lower = Q1 - (1.5 * IQR)

		- any number outside the limits ( > upper or < lower), are outliers
		- this could possibly be done during preprocessing? 

	- building off of this idea, what if the case table could be split into 2 shorter ranges with a large gap between them
		- for example consider, 1,2,3,4,...,50, 500,501,502,...,1000
		- this example is still pretty sparse
		- how could we detect this?

	- Also thinking about strings, we could always generate a hash value for a string and use that to get the label
		- this method introduces the possibility of collisions which might/might not be an issue
		- also the length of the hash values are important since the size of the case table is determined by the range of the integer cases
			- hashing could result in large gaps in the table which makes for a sparse array
		- could we construct a hash function in such a way as to minimize collisions and minimize the range of hash values?
			- would be difficult
		- can we construct a perfect hash function? if we can what would be the construction time? is it even worth it?
	- I read something about converting individual characters of a string into ascii and then using a two-step trivial hash function to obtain a final index for a jump tbale with 0 gaps. I didnt really understand it

cve.sourceforge.net
unicon/uni/unicon
unicon/ipl/packs progs procs