The example in the book for stack based evaluation is "?10". The example shows how the VM handles built in function calls via the stack, but "?10" is a generator. How does the stack handle this? Does it just call it repeatedly?

- Hash Functions
	- ideally a hash function should return a different hash value for 
	  each input
	- also for the Icon set/table has function the remainder produced
	  from dividing the hash by the number of slots should have a uniform distribution
	- this ideal hash function would require an unreasonable amount of 
	  storage and comuptation
	- hash computations have been studied extensively and in general
	  lookup time and storage overhead are inversely propotional
	
The Interpreter
	- the interpreter is the software realization of Icon's VM
	- stack based
	- the basic units of the VM are descriptors
	- instructions for the interpreter consist of operations that 
	  manipulate the stack, call C functions that carry out built in functions and manage flow control.
	- the interpreter consistes of a loop in which a VM instruction is
	  fetched and control is transferred to a section of code that can execute the corresponding operation

	- Stack-Based Evaluation
		- VM instructions typically push/pop data off the interpreter 
		  stack
		- the interpreter stack is distinct from the C program stack
		- the interpreter stack is an array of words
		- the variable "sp" points to the last word pushed to the stack, 
		  i.e. the top of the stack 
		- pushing increments sp by 1 word, while popping decrements sp by 
		  1 word
		- when the interpreter calls a built in operation, it pushes the 
		  arguments onto the stack as descriptors
		- then the corresponding C function is called with a pointer to
		  the place on the interpreter stack where the arguments begin
		- a null argument is pushed first to serve as the zeroith 
		  argument or Arg0
		- Arg0 will hold the return value of the C function so that when 
		  the C function returns, Arg0 will be at the top of the stack
		- Normally for more conventional virtual machines, the result 
		  would be pushed to the stack via a push() operation, but returning the value as an argument is better for Icon
		- ex.
			Consider the expresion ?10
			the corresponding VM operations are ...
			pnull		# push null
			int 	10  # pushdescriptor for 10
			random		# compute random value

			the first 2 instructions operate on the stack while the third instruction calls a C function

	- Virutal Machine Instructions 
		- every aspect of Icon expressions in the source code are
		  reflected either directly or indirectly, in the Icon VM instruction set
		- the same should be said for constants, identifiers, and  
		  operators
		- the meaning of an operation is fixed and cannot be changed
		  during execution		
		- however, the meaning of a function call cannot be determined 
		  until it is evaluated
		- 
